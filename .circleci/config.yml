version: 2.1

orbs:
  slack: circleci/slack@4.3.2

jobs:

  notify-start:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          channel: facultad
          event: always
          template: custom
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Se ha iniciado un nuevo trabajo en CircleCI."
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Usuario:*\n$CIRCLE_USERNAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Repositorio:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n$(git log -1 --pretty=%B)"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    }
                  ]
                }
              ]
            }

  lint:
    docker:
      - image: cimg/node:18.20.3
    steps:
      - checkout
      - run: npm install
      - run: npm run lint
      - run: npm run lint:html
      - slack/notify:
          channel: facultad
          event: fail
          template: basic_failed
          custom: '{"text":"Lint ha fallado! :x:"}'
      - slack/notify:
          channel: facultad
          event: pass
          template: basic_success
          custom: '{"text":"Lint ha pasado! :white_check_mark:"}'

  test:
    docker:
      - image: cimg/node:18.20.3
    steps:
      - checkout
      - run:
          name: Instalar Mocha y Chai
          command: npm install mocha chai
      - run: npm run test
          # name: Ejecutar pruebas y notificar al Slack 
          # command: |
          #   npm run test || test_status=$?
          #   if [ -z ${test_status+x} ]; then 
          #     curl -X POST -H 'Content-type: application/json' --data '{"text":"Test pasados con éxito."}' $SLACK_WEBHOOK_URL
          #   else 
          #     curl -X POST -H 'Content-type: application/json' --data '{"text":"¡Ha fallado algún test!"}' $SLACK_WEBHOOK_URL
          #     exit $test_status
          #   fi
      - slack/notify:
          channel: facultad
          event: fail
          template: basic_failed
          custom: '{"text":"Las pruebas han fallado! :x:"}'
      - slack/notify:
          channel: facultad
          event: pass
          template: basic_success
          custom: '{"text":"Las pruebas han pasado! :white_check_mark:"}'

  deploy:
    docker:
      - image: cimg/node:18.20.3
    steps:
      - checkout
      - run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST $RENDER_API_DEPLOY)
          if [ $response -eq 200 ]; then
            echo "Deployment successful"
            deploy_status="pending"
            SLACK_MESSAGE="Iniciando deploy..."
          else
            echo "Deployment failed with HTTP status code $response"
            SLACK_MESSAGE="La petición de deploy ha fallado! :x:"
            exit 1
          fi
      - slack/notify:
          channel: facultad
          event: always
          template: custom
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "$SLACK_MESSAGE"
                  }
                }
              ]
            }
      - run:
          name: Esperar a que el deploy se complete
          command: |
            while [ "$deploy_status" != "live" ]; do
              response=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" "https://api.render.com/v1/services/srv-cpgt1a6ct0pc739vl2v0/deploys")
              echo "Render API response: $response"
              deploy_status=$(echo $response | jq -r '.[0].deploy.status') # Se toma el estado del primer despliegue en la lista
              echo "Current deploy status: $deploy_status"
              if [ "$deploy_status" == "failed" ]; then
                echo "Deployment failed."
                exit 1
              fi
              sleep 5
            done
            echo "Deployment completed successfully."
      - slack/notify:
          channel: facultad
          event: fail
          template: basic_failed
          custom: '{"text":"El deploy ha fallado! :x:"}'
      - slack/notify:
          channel: facultad
          event: pass
          template: basic_success
          custom: '{"text":"Deploy completado con éxito! :white_check_mark:"}'

  test-production:
    docker:
      - image: cypress/base
    steps:
      - checkout
      - run:
          name: Instalar dependencias
          command: npm install
      - run:
          name: Ejecutar pruebas de Cypress
          command: npm run cypress:run
      - slack/notify:
          channel: facultad
          event: fail
          template: basic_failed
          custom: '{"text":"Las pruebas en producción han fallado! :x:"}'
      - slack/notify:
          channel: facultad
          event: pass
          template: basic_success
          custom: '{"text":"Las pruebas en producción han pasado! :white_check_mark:"}'

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - notify-start
      - lint:
          filters:
            branches:
              only: main
      - test:
          filters:
            branches:
              only: main
      - deploy:
          requires:
            - test
            - lint
          filters:
            branches:
              only: main
      - test-production:
          requires:
            - deploy
          filters:
            branches:
              only: main
